/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sunish;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Sunish
 */
public class CheckIn extends javax.swing.JFrame {

    /**
     * Creates new form CheckIn
     */
    Connection con;
    Statement stm;
    ResultSet rs;
    Color myGreen = new Color(51, 204, 0);

    public CheckIn() {
        initComponents();
        setVisible(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int Jframewidth = this.getSize().width;
        int Jframeheight = this.getSize().height;
        int x = (dim.width - Jframewidth) / 2;
        int y = (dim.height - Jframeheight) / 2;
        setLocation(x, y);
        setSize(Jframewidth, Jframeheight);
        TablePanel.setVisible(false);
        CheckInButton.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HomeButton = new javax.swing.JButton();
        NameLabel = new javax.swing.JLabel();
        BookIDLabel = new javax.swing.JLabel();
        NameText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        BookIDText = new javax.swing.JTextField();
        CardNoText = new javax.swing.JTextField();
        GoButton = new javax.swing.JButton();
        TablePanel = new javax.swing.JScrollPane();
        CheckInTable = new javax.swing.JTable();
        CheckInButton = new javax.swing.JButton();
        StatusLabel = new javax.swing.JLabel();
        HeadingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management Studio");
        setMinimumSize(new java.awt.Dimension(726, 531));
        setPreferredSize(new java.awt.Dimension(795, 552));

        HomeButton.setText("Home");
        HomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButtonActionPerformed(evt);
            }
        });

        NameLabel.setText("Name:");

        BookIDLabel.setText("Book ID.:");

        jLabel1.setText("Card No.:");

        GoButton.setText("Go");
        GoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoButtonActionPerformed(evt);
            }
        });

        CheckInTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card Number","Book ID", "Title", "Author Name", "Branch ID", "Due Date" ,"Checkbox"}

        ){
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            public boolean isCellEditable(int row, int column) {
                if (column < 6) {
                    return false;//This causes all cells to be not editable
                } else {
                    return true;
                }
            }
        });
        //SearchResultTable.getColumn("Select").setCellEditor(new DefaultCellEditor(BookSelectCheckBox));

        DefaultTableModel model = (DefaultTableModel) CheckInTable.getModel();
        TableColumn includeColumn = CheckInTable.getColumnModel().getColumn(6);
        // includeColumn.setCellEditor(new D)efaultCellEditor(new JCheckBox()));
    includeColumn.setCellEditor(CheckInTable.getDefaultEditor(Boolean.class));
    includeColumn.setCellRenderer(CheckInTable.getDefaultRenderer(Boolean.class));
    //columnModel.getColumn(6).setCellEditor(SearchResultTable.getDefaultEditor(Boolean.class)).setCellRenderer(SearchResultTable.getDefaultRenderer(Boolean.class));
    Object[] row={};
    model.addRow(row);
    TablePanel.setViewportView(CheckInTable);

    CheckInButton.setText("Check In");
    CheckInButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            CheckInButtonActionPerformed(evt);
        }
    });

    StatusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
    StatusLabel.setForeground(new java.awt.Color(51, 204, 0));
    StatusLabel.setText("Check In books");

    HeadingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
    HeadingLabel.setForeground(new java.awt.Color(51, 51, 255));
    HeadingLabel.setText("Check In Books");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(17, 17, 17)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                .add(layout.createSequentialGroup()
                    .add(56, 56, 56)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(GoButton)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(jLabel1)
                            .add(18, 18, 18)
                            .add(CardNoText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(BookIDLabel)
                                .add(NameLabel))
                            .add(20, 20, 20)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(NameText)
                                .add(BookIDText))
                            .add(2, 2, 2))
                        .add(TablePanel)))
                .add(layout.createSequentialGroup()
                    .add(HeadingLabel)
                    .add(0, 0, Short.MAX_VALUE))
                .add(layout.createSequentialGroup()
                    .add(0, 0, Short.MAX_VALUE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(CheckInButton)
                        .add(HomeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
            .add(17, 17, 17))
        .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(25, 25, 25)
            .add(StatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 685, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(16, Short.MAX_VALUE))
    );

    layout.linkSize(new java.awt.Component[] {CheckInButton, GoButton, HomeButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

    layout.setVerticalGroup(
        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(layout.createSequentialGroup()
            .add(20, 20, 20)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(HeadingLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(HomeButton))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 28, Short.MAX_VALUE)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(NameLabel)
                .add(NameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(BookIDLabel)
                .add(BookIDText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(18, 18, 18)
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                .add(jLabel1)
                .add(CardNoText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(GoButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(TablePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(CheckInButton)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
            .add(StatusLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new Index();
    }//GEN-LAST:event_HomeButtonActionPerformed

    private void CheckInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckInButtonActionPerformed
        // TODO add your handling code here:
        int NumberOfCheckedInBook = 0;
        int flagCheckin = 0;
        int flagfine = 0;
        try {
            for (int i = 0; i < CheckInTable.getRowCount(); i++) {
                boolean isChecked = (Boolean) CheckInTable.getValueAt(i, 6);
                if (isChecked) {
                    //get the values of the columns you need.
                    NumberOfCheckedInBook++;
                }
            }
            if (NumberOfCheckedInBook == 0) {
                StatusLabel.setText("Please select some books to be checked in");
                StatusLabel.setForeground(Color.red);
                flagCheckin = 1;
            } else {
                flagCheckin = 0;
            }
        } catch (Exception err) {
            err.printStackTrace();
        }
        if (flagCheckin == 0) {
            StatusLabel.setText("Check In books.");
            StatusLabel.setForeground(myGreen);
            try {
                Object a[][];
                a = new Object[NumberOfCheckedInBook][3];
                NumberOfCheckedInBook = 0;
                for (int i = 0; i < CheckInTable.getRowCount(); i++) {
                    boolean isChecked = (Boolean) CheckInTable.getValueAt(i, 6);
                    if (isChecked) {
                        a[NumberOfCheckedInBook][0] = CheckInTable.getValueAt(i, 0);
                        a[NumberOfCheckedInBook][1] = CheckInTable.getValueAt(i, 1);
                        a[NumberOfCheckedInBook][2] = CheckInTable.getValueAt(i, 4);
                        NumberOfCheckedInBook++;
                    }
                }
                BigDecimal sum = new BigDecimal(0.00);
                for (int i = 0; i < a.length; i++) {
                    Class.forName("com.mysql.jdbc.Driver");
                    con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
                    stm = (Statement) con.createStatement();
                    String sql2 = "Update Book_loans set Date_in = CURDATE() where Card_no = " + a[i][0] + " and book_id = '" + a[i][1] + "' and branch_id = " + a[i][2] + ";";
                    PreparedStatement stt = con.prepareStatement(sql2);
                    System.out.println(sql2);
                    String sql = "select DATEDIFF(curdate(),due_date)*0.25 from Book_Loans where DATEDIFF(curdate(),due_date) > 0  and date_in is null and Card_no = " + a[i][0] + " and book_id = '" + a[i][1] + "' and branch_id = " + a[i][2] + "\n"
                            + "union\n"
                            + "select DATEDIFF(date_in,due_date)*0.25 from Book_Loans where DATEDIFF(date_in,due_date) > 0 and date_in is not null and Card_no = " + a[i][0] + " and book_id = '" + a[i][1] + "' and branch_id = " + a[i][2] + ";";
                    //System.out.println(sql);
                    PreparedStatement sttm = con.prepareStatement(sql);
                    sttm = con.prepareStatement(sql);
                    ResultSet rs = sttm.executeQuery();
                    while (rs.next()) {
                        System.out.println(rs.getObject(1));
                        flagfine = 1;
                        sum  = sum.add((BigDecimal)rs.getObject(1));
                    }
                    stt = con.prepareStatement(sql2);
                    stt.executeUpdate();
                }
                if (flagfine == 1) {
                    JOptionPane.showMessageDialog(null, "The student has pending fines of " + sum+"." , "Information", 1);
                    dispose();
                    String CardNumber = CardNoText.getText().toString().trim();
                    new Fines(CardNumber);
                } else {
                    dispose();
                    new Index();
                }
                JOptionPane.showMessageDialog(null, "Your Check in is successfull", "Information", 1);
                StatusLabel.setText("Check In books.");
                StatusLabel.setForeground(myGreen);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_CheckInButtonActionPerformed

    private void GoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoButtonActionPerformed
        // TODO add your handling code here:
        TablePanel.setVisible(true);
        CheckInButton.setVisible(true);
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            stm = (Statement) con.createStatement();
            String BookId = BookIDText.getText().toString().trim();
            String Name = NameText.getText().toString().trim();
            String CardNumber = CardNoText.getText().toString().trim();
            int flag = 0;
            String sql = "Select bl.Card_no, bl.Book_id, bo.title, ba.author_name, bl.branch_id, bl.due_date  from borrower bow NATURAL JOIN book_loans bl NATURAL JOIN book bo NATURAL JOIN book_authors ba where ";
            if (Name.length() > 0) {
                sql = sql + " bow.Fname like '% " + Name + " %' or bow.Fname like '" + Name + " %'or bow.Fname = '" + Name + "' or bow.Fname like '% " + Name + "' or bow.Lname like '% " + Name + " %' or bow.Lname like '" + Name + " %' or bow.Lname = '" + Name + "' or bow.Lname like '% " + Name + "'";
                flag = 1;
            }
            if (BookId.length() > 0) {
                if (flag == 1) {
                    sql = sql + "and ";
                }
                sql = sql + " bl.book_id ='" + BookId + "' ";
                flag = 1;
            }
            if (CardNumber.length() > 0) {
                if (flag == 1) {
                    sql = sql + "and ";
                }
                sql = sql + " bl.Card_no = " + CardNumber;
                flag = 1;
            }
            if (flag == 1) {
                    sql = sql + " and Date_in is Null";
                }
            else{
                sql = sql + " Date_in is Null and ";
            }
            sql = sql + "";
            if (flag == 0) {
                sql = sql + "1=1 ";
            }
            sql = sql + " Order by Card_no;";
            System.out.println(sql);
            PreparedStatement stt = con.prepareStatement(sql);
            ResultSet rs = stt.executeQuery();
            DefaultTableModel model = (DefaultTableModel) CheckInTable.getModel();
            int rowCount = CheckInTable.getRowCount();
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }
            TableColumn includeColumn = CheckInTable.getColumnModel().getColumn(6);
            includeColumn.setCellEditor(CheckInTable.getDefaultEditor(Boolean.class));
            includeColumn.setCellRenderer(CheckInTable.getDefaultRenderer(Boolean.class));
            int ididentifier = 0;
            while (rs.next()) {
                ididentifier++;
                Object[] row = {rs.getObject(1), rs.getObject(2), rs.getObject(3), rs.getObject(4), rs.getObject(5), rs.getObject(6), Boolean.FALSE};
                model.addRow(row);
            }
            if (ididentifier == 0) {
                StatusLabel.setText("There are no loans");
                TablePanel.setVisible(false);
                CheckInButton.setVisible(false);

            } else {
                StatusLabel.setText("Check In books");
            }
        } catch (Exception err) {
            err.printStackTrace();
        } finally {
            if (stm != null) {
                try {
                    stm.close();
                } catch (SQLException sqlex) {
                    // ignore -- as we can't do anything about it here           
                }

                stm = null;
            }
            if (con != null) {
                try {
                    con.close();
                } catch (SQLException sqlex) {
                    // ignore -- as we can't do anything about it here     
                }
                con = null;
            }
        }
    }//GEN-LAST:event_GoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckIn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckIn().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BookIDLabel;
    private javax.swing.JTextField BookIDText;
    private javax.swing.JTextField CardNoText;
    private javax.swing.JButton CheckInButton;
    private javax.swing.JTable CheckInTable;
    private javax.swing.JButton GoButton;
    private javax.swing.JLabel HeadingLabel;
    private javax.swing.JButton HomeButton;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JTextField NameText;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JScrollPane TablePanel;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
