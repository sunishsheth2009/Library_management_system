/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sunish;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Sunish
 */
public class Fines extends javax.swing.JFrame {

    /**
     * Creates new form Fines
     */
    Connection con;
    Statement stm;
    ResultSet rs;
    Color myGreen = new Color(51, 204, 0);

    public Fines(String CardNumber) {
        initComponents();
        setVisible(true);
        FirstNameText.requestFocus();
        JRootPane rootPane = SwingUtilities.getRootPane(GoButton);
        rootPane.setDefaultButton(GoButton);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int Jframewidth = this.getSize().width;
        int Jframeheight = this.getSize().height;
        int x = (dim.width - Jframewidth) / 2;
        int y = (dim.height - Jframeheight) / 2;
        setLocation(x, y);
        setSize(Jframewidth, Jframeheight);
        TablePanel.setVisible(false);
        PayButton.setVisible(false);
        if (CardNumber != "0") {
            CardNumberText.setText(CardNumber);
        }
        RadioBut1.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        HeadingLabel = new javax.swing.JLabel();
        FirstNameLabel = new javax.swing.JLabel();
        LastNameLabel = new javax.swing.JLabel();
        StatusLabel = new javax.swing.JLabel();
        CardNoLabel = new javax.swing.JLabel();
        FirstNameText = new javax.swing.JTextField();
        LastNameText = new javax.swing.JTextField();
        CardNumberText = new javax.swing.JTextField();
        HomeButton = new javax.swing.JButton();
        GoButton = new javax.swing.JButton();
        TablePanel = new javax.swing.JScrollPane();
        FineTable = new javax.swing.JTable();
        PayButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        RadioBut1 = new javax.swing.JRadioButton();
        RadioBut2 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library Management Studio");
        setMinimumSize(new java.awt.Dimension(724, 410));
        setPreferredSize(new java.awt.Dimension(795, 548));
        setSize(new java.awt.Dimension(724, 410));

        HeadingLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        HeadingLabel.setForeground(new java.awt.Color(51, 51, 255));
        HeadingLabel.setText("Fines Details");

        FirstNameLabel.setText("First Name:");

        LastNameLabel.setText("Last Name:");

        StatusLabel.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        StatusLabel.setForeground(new java.awt.Color(51, 204, 0));
        StatusLabel.setText("Search and Pay your Fine.");

        CardNoLabel.setText("Card No.:");

        FirstNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameTextActionPerformed(evt);
            }
        });

        HomeButton.setText("Home");
        HomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButtonActionPerformed(evt);
            }
        });

        GoButton.setText("Go");
        GoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoButtonActionPerformed(evt);
            }
        });

        JCheckBox BookSelectCheckBox = new javax.swing.JCheckBox();
        FineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Card Number", "Loan Id", "First Name", "Last Name", "Book ID", "Branch ID", "Due Date", "Fine Amount", "Checkbox"}

        ){
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int row, int column) {
                if (column < 8) {
                    return false;//This causes all cells to be not editable
                } else {
                    return true;
                }
            }

        });
        //SearchResultTable.getColumn("Select").setCellEditor(new DefaultCellEditor(BookSelectCheckBox));
        DefaultTableModel model = (DefaultTableModel) FineTable.getModel();
        TableColumn includeColumn = FineTable.getColumnModel().getColumn(8);
        // includeColumn.setCellEditor(new DefaultCellEditor(new JCheckBox()));
        includeColumn.setCellEditor(FineTable.getDefaultEditor(Boolean.class));
        includeColumn.setCellRenderer(FineTable.getDefaultRenderer(Boolean.class)
        );
        TablePanel.setViewportView(FineTable);

        PayButton.setText("Pay");
        PayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayButtonActionPerformed(evt);
            }
        });

        UpdateButton.setText("Update Fines");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(RadioBut1);
        RadioBut1.setText("Display All Fines");

        buttonGroup1.add(RadioBut2);
        RadioBut2.setText("Display Unpaid Fines");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(HeadingLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(UpdateButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(HomeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(39, 39, 39))
            .add(layout.createSequentialGroup()
                .add(44, 44, 44)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, TablePanel)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(FirstNameLabel)
                                .add(LastNameLabel)
                                .add(CardNoLabel))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(layout.createSequentialGroup()
                                    .add(RadioBut1)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(RadioBut2)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 109, Short.MAX_VALUE)
                                    .add(GoButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(FirstNameText)
                                .add(LastNameText)
                                .add(CardNumberText))))
                    .add(PayButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(47, 47, 47))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(StatusLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {GoButton, HomeButton, PayButton, UpdateButton}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(HeadingLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(HomeButton)
                    .add(UpdateButton))
                .add(18, 27, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(FirstNameLabel)
                    .add(FirstNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(LastNameLabel)
                    .add(LastNameText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(CardNoLabel)
                    .add(CardNumberText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(8, 8, 8)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(GoButton)
                    .add(RadioBut1)
                    .add(RadioBut2))
                .add(10, 10, 10)
                .add(TablePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 238, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(PayButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED, 22, Short.MAX_VALUE)
                .add(StatusLabel)
                .add(10, 10, 10))
        );

        getAccessibleContext().setAccessibleName("Library Management Studio");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FirstNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FirstNameTextActionPerformed

    private void HomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButtonActionPerformed
        // TODO add your handling code here:
        dispose();
        new Index();
    }//GEN-LAST:event_HomeButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            stm = (Statement) con.createStatement();
            String sql = "select Loan_id, DATEDIFF(curdate(),due_date)*0.25 as Date_diffirence, true as bool from Book_Loans where DATEDIFF(curdate(),due_date) > 0  and date_in is null and loan_id Not In (select loan_id from Fines) \n"
                    + "union\n"
                    + "select Loan_id, DATEDIFF(date_in,due_date)*0.25 as Date_diffirence, true as bool from Book_Loans where DATEDIFF(date_in,due_date) > 0 and date_in is not null and loan_id Not In (select loan_id from Fines);\n";

            String sql2 = "select Loan_id, DATEDIFF(curdate(),due_date)*0.25 as Date_diffirence, true as bool from Book_Loans where DATEDIFF(curdate(),due_date) > 0  and date_in is null and loan_id In (select loan_id from Fines where paid = false) \n"
                    + "union\n"
                    + "select Loan_id, DATEDIFF(date_in,due_date)*0.25 as Date_diffirence, true as bool from Book_Loans where DATEDIFF(date_in,due_date) > 0 and date_in is not null and loan_id In (select loan_id from Fines where paid = false);";
            PreparedStatement stt = con.prepareStatement(sql);
            ResultSet rs = stt.executeQuery();
            //System.out.println(sql2);
            while (rs.next()) {
                String insert = "Insert into Fines values(" + rs.getObject(1) + "," + rs.getObject(2) + ", false);";
                System.out.println(insert);
                PreparedStatement stt1 = con.prepareStatement(insert);
                stt1.executeUpdate();
            }
            PreparedStatement stt2 = con.prepareStatement(sql2);
            ResultSet rs2 = stt2.executeQuery();
            while (rs2.next()) {
                String update = "Update Fines set fine_amt = " + rs2.getObject(2) + " where loan_id = " + rs2.getObject(1) + ";";
                System.out.println(update);
                PreparedStatement stt3 = con.prepareStatement(update);
                stt3.executeUpdate();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void GoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoButtonActionPerformed
        // TODO add your handling code here:
        TablePanel.setVisible(true);
        PayButton.setVisible(true);
        if (RadioBut1.isSelected()) {
            StatusLabel.setText("The one which are ticked are the payed and one which are not ticked are not payed.");
            PayButton.setEnabled(false);
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
                stm = (Statement) con.createStatement();
                String FirstName = FirstNameText.getText().toString().trim();
                String LastName = LastNameText.getText().toString().trim();
                String CardNumber = CardNumberText.getText().toString().trim();
                int flag = 0;
                String sql = "Select bo.Card_no, f.loan_id, bo.Fname, bo.Lname, bl.book_id, bl.branch_id, bl.due_date, f.fine_amt  from borrower bo NATURAL JOIN book_loans bl NATURAL JOIN fines f where ";
                if (FirstName.length() > 0) {
                    sql = sql + " bo.Fname like '% " + FirstName + " %' or bo.Fname like '" + FirstName + " %'or bo.Fname = '" + FirstName + "' or bo.Fname like '% " + FirstName + "'";
                    flag = 1;
                }
                if (LastName.length() > 0) {
                    if (flag == 1) {
                        sql = sql + "and ";
                    }
                    sql = sql + " bo.Lname like '% " + LastName + " %' or bo.Lname like '" + LastName + " %'or bo.Lname = '" + LastName + "' or bo.Lname like '% " + LastName + "' ";
                    flag = 1;
                }
                if (CardNumber.length() > 0) {
                    if (flag == 1) {
                        sql = sql + "and ";
                    }
                    sql = sql + " bl.Card_no = " + CardNumber;
                    flag = 1;
                }
                if (flag == 1) {
                    sql = sql + " and f.paid = false";
                }
                if (flag == 0) {
                    sql = sql + "1=1 and f.paid = false Order by Card_no";
                }
                sql = sql + ";";
                //System.out.println(sql);
                PreparedStatement stt = con.prepareStatement(sql);
                ResultSet rs = stt.executeQuery();
                DefaultTableModel model = (DefaultTableModel) FineTable.getModel();
                int rowCount = FineTable.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }
                TableColumn includeColumn = FineTable.getColumnModel().getColumn(8);
                includeColumn.setCellEditor(FineTable.getDefaultEditor(Boolean.class));
                includeColumn.setCellRenderer(FineTable.getDefaultRenderer(Boolean.class));
                while (rs.next()) {
                    Object[] row = {rs.getObject(1), rs.getObject(2), rs.getObject(3), rs.getObject(4), rs.getObject(5), rs.getObject(6), rs.getObject(7), rs.getObject(8), Boolean.FALSE};
                    model.addRow(row);
                }
                int flag2 = 0;
                String sql2 = "Select bo.Card_no, f.loan_id, bo.Fname, bo.Lname, bl.book_id, bl.branch_id, bl.due_date, f.fine_amt  from borrower bo NATURAL JOIN book_loans bl NATURAL JOIN fines f where ";
                if (FirstName.length() > 0) {
                    sql2 = sql2 + " bo.Fname like '% " + FirstName + " %' or bo.Fname like '" + FirstName + " %'or bo.Fname = '" + FirstName + "' or bo.Fname like '% " + FirstName + "'";
                    flag2 = 1;
                }
                if (LastName.length() > 0) {
                    if (flag2 == 1) {
                        sql2 = sql2 + "and ";
                    }
                    sql2 = sql2 + " bo.Lname like '% " + LastName + " %' or bo.Lname like '" + LastName + " %'or bo.Lname = '" + LastName + "' or bo.Lname like '% " + LastName + "' ";
                    flag2 = 1;
                }
                if (CardNumber.length() > 0) {
                    if (flag2 == 1) {
                        sql2 = sql2 + "and ";
                    }
                    sql2 = sql2 + " bl.Card_no = " + CardNumber;
                    flag2 = 1;
                }
                if (flag2 == 1) {
                    sql2 = sql2 + " and f.paid = true";
                }
                if (flag2 == 0) {
                    sql2 = sql2 + "1=1 and f.paid = true Order by Card_no";
                }
                sql2 = sql2 + ";";
                //System.out.println(sql2);
                PreparedStatement stt2 = con.prepareStatement(sql2);
                ResultSet rs2 = stt2.executeQuery();
                while (rs2.next()) {
                    Object[] row = {rs2.getObject(1), rs2.getObject(2), rs2.getObject(3), rs2.getObject(4), rs2.getObject(5), rs2.getObject(6), rs2.getObject(7), rs2.getObject(8), Boolean.TRUE};
                    model.addRow(row);
                }
            } catch (Exception err) {
                err.printStackTrace();
            } finally {
                if (stm != null) {
                    try {
                        stm.close();
                    } catch (SQLException sqlex) {
                        // ignore -- as we can't do anything about it here           
                    }

                    stm = null;
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException sqlex) {
                        // ignore -- as we can't do anything about it here     
                    }
                    con = null;
                }
            }
        }else{
            StatusLabel.setText("Search and Pay your Fine.");
              PayButton.setEnabled(true);
            try {
                Class.forName("com.mysql.jdbc.Driver");
                con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
                stm = (Statement) con.createStatement();
                String FirstName = FirstNameText.getText().toString().trim();
                String LastName = LastNameText.getText().toString().trim();
                String CardNumber = CardNumberText.getText().toString().trim();
                int flag = 0;
                String sql = "Select bo.Card_no, f.loan_id, bo.Fname, bo.Lname, bl.book_id, bl.branch_id, bl.due_date, f.fine_amt  from borrower bo NATURAL JOIN book_loans bl NATURAL JOIN fines f where ";
                if (FirstName.length() > 0) {
                    sql = sql + " bo.Fname like '% " + FirstName + " %' or bo.Fname like '" + FirstName + " %'or bo.Fname = '" + FirstName + "' or bo.Fname like '% " + FirstName + "'";
                    flag = 1;
                }
                if (LastName.length() > 0) {
                    if (flag == 1) {
                        sql = sql + "and ";
                    }
                    sql = sql + " bo.Lname like '% " + LastName + " %' or bo.Lname like '" + LastName + " %'or bo.Lname = '" + LastName + "' or bo.Lname like '% " + LastName + "' ";
                    flag = 1;
                }
                if (CardNumber.length() > 0) {
                    if (flag == 1) {
                        sql = sql + "and ";
                    }
                    sql = sql + " bl.Card_no = " + CardNumber;
                    flag = 1;
                }
                if (flag == 1) {
                    sql = sql + " and f.paid = false";
                }
                if (flag == 0) {
                    sql = sql + "1=1 and f.paid = false Order by Card_no";
                }
                sql = sql + ";";
                //System.out.println(sql);
                PreparedStatement stt = con.prepareStatement(sql);
                ResultSet rs = stt.executeQuery();
                DefaultTableModel model = (DefaultTableModel) FineTable.getModel();
                int rowCount = FineTable.getRowCount();
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }
                TableColumn includeColumn = FineTable.getColumnModel().getColumn(8);
                includeColumn.setCellEditor(FineTable.getDefaultEditor(Boolean.class));
                includeColumn.setCellRenderer(FineTable.getDefaultRenderer(Boolean.class));
                while (rs.next()) {
                    Object[] row = {rs.getObject(1), rs.getObject(2), rs.getObject(3), rs.getObject(4), rs.getObject(5), rs.getObject(6), rs.getObject(7), rs.getObject(8), Boolean.TRUE};
                    model.addRow(row);
                }
            } catch (Exception err) {
                err.printStackTrace();
            } finally {
                if (stm != null) {
                    try {
                        stm.close();
                    } catch (SQLException sqlex) {
                        // ignore -- as we can't do anything about it here           
                    }

                    stm = null;
                }
                if (con != null) {
                    try {
                        con.close();
                    } catch (SQLException sqlex) {
                        // ignore -- as we can't do anything about it here     
                    }
                    con = null;
                }
            }
        }

    }//GEN-LAST:event_GoButtonActionPerformed

    private void PayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayButtonActionPerformed
        // TODO add your handling code here:
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            stm = (Statement) con.createStatement();
            int count = 0;
            int mainflag = 0;
            for (int i = 0; i < FineTable.getRowCount(); i++) {
                boolean isChecked = (Boolean) FineTable.getValueAt(i, 8);
                if (isChecked) {
                    //get the values of the columns you need.
                    count++;
                    int loanid = (int) FineTable.getValueAt(i, 1);
                    String check = "Select Date_in from book_loans where loan_id =" + loanid + ";";
                    PreparedStatement stt1 = con.prepareStatement(check);
                    ResultSet rs = stt1.executeQuery();
                    while (rs.next()) {
                        if (rs.getObject(1) != null) {
                            String update = "Update Fines set paid = true where loan_id  = " + loanid + ";";
                            System.out.println(update);
                            PreparedStatement stt = con.prepareStatement(update);
                            stt.executeUpdate();
                        } else {
                            JOptionPane.showMessageDialog(null, "Check In of the book (ID = " + FineTable.getValueAt(i, 4) + ") is must before paying the fine", "Information", 1);
                            mainflag = 1;
                        }
                    }
                }
            }
            if (mainflag == 1) {
                dispose();
                new CheckIn();
            } else {
                dispose();
                new Index();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_PayButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Fines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Fines().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CardNoLabel;
    private javax.swing.JTextField CardNumberText;
    private javax.swing.JTable FineTable;
    private javax.swing.JLabel FirstNameLabel;
    private javax.swing.JTextField FirstNameText;
    private javax.swing.JButton GoButton;
    private javax.swing.JLabel HeadingLabel;
    private javax.swing.JButton HomeButton;
    private javax.swing.JLabel LastNameLabel;
    private javax.swing.JTextField LastNameText;
    private javax.swing.JButton PayButton;
    private javax.swing.JRadioButton RadioBut1;
    private javax.swing.JRadioButton RadioBut2;
    private javax.swing.JLabel StatusLabel;
    private javax.swing.JScrollPane TablePanel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.ButtonGroup buttonGroup1;
    // End of variables declaration//GEN-END:variables
}
